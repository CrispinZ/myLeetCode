# refer to https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/
class Solution:
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        m = len(nums1)
        n = len(nums2)
        if(m > n):
            nums1, nums2, m, n = nums2, nums1, n, m
        if m == 0:
            tmp = n // 2
            if(n % 2 == 1):
                return nums2[tmp]
            else:
                return (nums2[tmp-1] + nums2[tmp]) / 2
        imin = 0 
        imax = m
        while(imin <= imax):
            i = (imin + imax) // 2
            j = (m + n + 1) // 2 - i
            if(i < m and nums2[j-1] > nums1[i]):
                imin = i + 1
            elif(i > 0 and nums1[i-1] > nums2[j]):
                imax = i - 1
            else:
                if(i == 0):
                    max_left = nums2[j-1]
                    if(j == n):
                        min_right = nums1[i]
                    else:
                        min_right = min(nums1[i], nums2[j])
                elif(i == m):
                    min_right = nums2[j]
                    if(j == 0):
                        max_left = nums1[i-1]
                    else:
                        max_left = max(nums1[i-1], nums2[j-1])
                else:
                    if(j == n):
                        max_left = max(nums1[i-1], nums2[j-1])
                        min_left = nums1[i]
                    else:
                        min_right = min(nums1[i], nums2[j])
                        max_left = max(nums1[i-1], nums2[j-1])
                if((m + n) % 2 == 0):
                    return (min_right + max_left) / 2
                else:
                    return max_left * 1.0
